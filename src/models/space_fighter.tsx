/*
  Auto-generated by: https://github.com/pmndrs/gltfjsx
  Command: npx gltfjsx@6.2.16 scene.gltf --transform --types 
  Files: scene.gltf [93.67KB] > scene-transformed.glb [1.25MB] (-1240%)
  Author: Comrade1280 (https://sketchfab.com/comrade1280)
  License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
  Source: https://sketchfab.com/3d-models/space-fighter-e766136d4871441289d37d44a4bbcd3b
  Title: Space Fighter
*/

import type * as THREE from 'three'
import type { GLTF } from 'three-stdlib'
import { useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import { useRef } from 'react'
import { getModelPath } from '@/utils'

interface GLTFResult extends GLTF {
  nodes: {
    Object_4: THREE.Mesh
    Object_6: THREE.Mesh
    Object_7: THREE.Mesh
  }
  materials: {
    '15_-_Default': THREE.MeshStandardMaterial
    material: THREE.MeshStandardMaterial
  }
}

const path = getModelPath('space_fighter')

export default function SpaceFighter(props: JSX.IntrinsicElements['group']) {
  const modelRef = useRef<THREE.Group>(null!)
  const { nodes, materials } = useGLTF(path) as GLTFResult

  useFrame(({ camera, clock }) => {
    const y = Math.sin(clock.elapsedTime) * 0.15
    modelRef.current.position.set(0.5, y, -3.5)
    camera.add(modelRef.current)
  })

  return (
    <group {...props} ref={modelRef} dispose={null}>
      <mesh
        geometry={nodes.Object_4.geometry}
        material={materials['15_-_Default']}
        position={[0, 25.738, -108.968]}
        rotation={[-Math.PI / 2, 0, 0]}
      />
      <mesh
        geometry={nodes.Object_6.geometry}
        material={materials.material}
        position={[0, -13.815, 56.051]}
        rotation={[-Math.PI / 2, 0, 0]}
      />
      <instancedMesh
        args={[nodes.Object_7.geometry, materials['15_-_Default'], 32]}
        // @ts-ignore
        instanceMatrix={nodes.Object_7.instanceMatrix}
      />
    </group>
  )
}

useGLTF.preload(path)
