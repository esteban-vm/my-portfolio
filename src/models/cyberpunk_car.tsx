/*
  Auto-generated by: https://github.com/pmndrs/gltfjsx
  Command: npx gltfjsx@6.2.16 scene.gltf --transform --types 
  Files: scene.gltf [342.47KB] > scene-transformed.glb [418.97KB] (-22%)
  Author: sipabyss (https://sketchfab.com/sipabyss)
  License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
  Source: https://sketchfab.com/3d-models/draftpunk-coursework-cyberpunk-car-a6d8bf6728484dcea0054e9235c2bcf0
  Title: DraftPunk Coursework - Cyberpunk Car
*/

import type * as THREE from 'three'
import type { GLTF } from 'three-stdlib'
import { useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import { useRef } from 'react'
import { getModelPath } from '@/utils'

interface GLTFResult extends GLTF {
  nodes: {
    pCylinder76_Engine2_0: THREE.Mesh
    pCube264_Fire_0: THREE.Mesh
    polySurface6_Engine1_0: THREE.Mesh
    pCube186_Engine2_0: THREE.Mesh
    pCube113_Engine3_0: THREE.Mesh
    pCube256_Engine3_0: THREE.Mesh
  }
  materials: {
    PaletteMaterial001: THREE.MeshStandardMaterial
    PaletteMaterial002: THREE.MeshStandardMaterial
  }
}

const path = getModelPath('cyberpunk_car')

export default function CyberpunkCar(props: JSX.IntrinsicElements['group']) {
  const modelRef = useRef<THREE.Group>(null!)
  const { nodes, materials } = useGLTF(path) as GLTFResult

  useFrame(({ camera, clock }) => {
    // const y = Math.sin(clock.elapsedTime) * 0.15 - 0.5
    // modelRef.current.position.set(0, y, -3.5)
    // camera.add(modelRef.current)

    modelRef.current.position.y = Math.sin(clock.elapsedTime) * 0.2 + 2

    if (modelRef.current.position.x > camera.position.x + 10) {
      modelRef.current.rotation.y = Math.PI
    } else if (modelRef.current.position.x < camera.position.x - 10) {
      modelRef.current.rotation.y = 0
    }

    if (modelRef.current.rotation.y === 0) {
      modelRef.current.position.x += 0.01
      modelRef.current.position.z -= 0.01
    } else {
      modelRef.current.position.x -= 0.01
      modelRef.current.position.z += 0.01
    }
  })

  return (
    <group {...props} ref={modelRef} dispose={null}>
      <mesh
        geometry={nodes.pCylinder76_Engine2_0.geometry}
        material={materials.PaletteMaterial001}
        position={[15.533, 33.493, 99.426]}
        rotation={[-Math.PI, 0, Math.PI / 3]}
        scale={[0.894, 1, 0.894]}
      />
      <mesh
        geometry={nodes.pCube264_Fire_0.geometry}
        material={materials.PaletteMaterial002}
        position={[-14.244, 36.701, -75.086]}
        scale={[12.212, 5.039, 23.82]}
      />
      <instancedMesh
        args={[nodes.polySurface6_Engine1_0.geometry, materials.PaletteMaterial001, 6]}
        // @ts-ignore
        instanceMatrix={nodes.polySurface6_Engine1_0.instanceMatrix}
      />
      <instancedMesh
        args={[nodes.pCube186_Engine2_0.geometry, materials.PaletteMaterial001, 9]}
        // @ts-ignore
        instanceMatrix={nodes.pCube186_Engine2_0.instanceMatrix}
      />
      <instancedMesh
        args={[nodes.pCube113_Engine3_0.geometry, materials.PaletteMaterial001, 6]}
        // @ts-ignore
        instanceMatrix={nodes.pCube113_Engine3_0.instanceMatrix}
      />
      <instancedMesh
        args={[nodes.pCube256_Engine3_0.geometry, materials.PaletteMaterial001, 8]}
        // @ts-ignore
        instanceMatrix={nodes.pCube256_Engine3_0.instanceMatrix}
      />
    </group>
  )
}

useGLTF.preload(path)
