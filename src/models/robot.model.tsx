/*
  Auto-generated by: https://github.com/pmndrs/gltfjsx
  Command: npx gltfjsx@6.2.16 scene.gltf --transform --types 
  Files: scene.gltf [46.34KB] > scene-transformed.glb [723.41KB] (-1461%)
  Author: Yandrack (https://sketchfab.com/Yandrack)
  License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
  Source: https://sketchfab.com/3d-models/cute-home-robot-7b75f204eb3e42b6babd883773e0789d
  Title: Cute Home Robot
*/

import type * as THREE from 'three'
import type { GLTF } from 'three-stdlib'
import { useGLTF, useAnimations } from '@react-three/drei'
import { useEffect, useRef } from 'react'
import { getModelPath } from '@/utils'

interface GLTFResult extends GLTF {
  nodes: {
    Cylinder001_M_Suelo_0: THREE.Mesh
    Object_7: THREE.SkinnedMesh
    Object_8: THREE.SkinnedMesh
    Object_9: THREE.SkinnedMesh
    Object_10: THREE.SkinnedMesh
    _rootJoint: THREE.Bone
  }
  materials: {
    M_Suelo: THREE.MeshStandardMaterial
    M_Metal1: THREE.MeshStandardMaterial
    M_Pantalla1: THREE.MeshStandardMaterial
    M_Pantalla2: THREE.MeshStandardMaterial
    M_Rueda: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

interface GLTFAction extends THREE.AnimationClip {
  name: 'Take 001'
}

const path = getModelPath('robot')

export default function RobotModel(props: JSX.IntrinsicElements['group']) {
  const modelRef = useRef<THREE.Group>(null!)
  const { nodes, materials, animations } = useGLTF(path) as GLTFResult
  const { actions } = useAnimations(animations, modelRef)

  useEffect(() => {
    actions['Take 001']?.play()
  }, [actions])

  return (
    <group {...props} ref={modelRef} dispose={null}>
      <group name='Sketchfab_Scene'>
        <primitive object={nodes._rootJoint} />
        <mesh
          geometry={nodes.Cylinder001_M_Suelo_0.geometry}
          material={materials.M_Suelo}
          name='Cylinder001_M_Suelo_0'
          position={[-0.007, 0, -0.035]}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={0.057}
        />
        <skinnedMesh
          geometry={nodes.Object_7.geometry}
          material={materials.M_Metal1}
          name='Object_7'
          scale={0.057}
          skeleton={nodes.Object_7.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Object_8.geometry}
          material={materials.M_Pantalla1}
          name='Object_8'
          scale={0.057}
          skeleton={nodes.Object_8.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Object_9.geometry}
          material={materials.M_Pantalla2}
          name='Object_9'
          scale={0.057}
          skeleton={nodes.Object_9.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Object_10.geometry}
          material={materials.M_Rueda}
          name='Object_10'
          scale={0.057}
          skeleton={nodes.Object_10.skeleton}
        />
      </group>
    </group>
  )
}

useGLTF.preload(path)
